# Copyright 2021 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

cc_library(
    name = "cras_config",
    srcs = [
        "cras_config.c",
    ],
    hdrs = [
        "cras_config.h",
    ],
    defines = [
        "CRAS_SOCKET_FILE_DIR=\\\"/run/cras\\\"",
    ],
    visibility = [
        "//cras/src/libcras:__pkg__",
    ],
    deps = [
        "//cras/src/common:cras_types",
    ],
)

cc_library(
    name = "cras_file_wait",
    srcs = [
        "cras_file_wait.c",
    ],
    hdrs = [
        "cras_file_wait.h",
    ],
    visibility = [
        "//cras/src/libcras:__pkg__",
    ],
    deps = [
        "//cras/src/common:cras_config",
        "//cras/src/common:cras_string",
    ],
)

cc_library(
    name = "cras_messages",
    hdrs = [
        "cras_messages.h",
    ],
    visibility = [
        "//cras/src/libcras:__pkg__",
    ],
)

cc_library(
    name = "cras_observer_ops",
    hdrs = [
        "cras_observer_ops.h",
    ],
    visibility = [
        "//cras/src/libcras:__pkg__",
        "//cras/src/server:__pkg__",
    ],
)

cc_library(
    name = "cras_shm",
    srcs = [
        "cras_shm.c",
    ],
    hdrs = [
        "cras_shm.h",
    ],
    linkopts = ["-lrt"],
    visibility = [
        "//cras/src/libcras:__pkg__",
    ],
    deps = [
        "//:build_config",
        "//cras/src/common:cras_string",
        "//cras/src/common:cras_types",
        "//cras/src/common:cras_util",
    ],
)

# Leave this one out of :cras_shm to allow unit tests to depend on cras_shm
# but stub the selinux helper.
cc_library(
    name = "cras_selinux_helper",
    srcs = select({
        "//:selinux_build": ["cras_selinux_helper.c"],
        "//conditions:default": ["cras_selinux_helper_stub.c"],
    }),
    visibility = [
        "//cras/src/libcras:__pkg__",
    ],
    deps = [":cras_shm"] + select({
        "//:selinux_build": ["@libselinux"],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "cras_string",
    srcs = [
        "cras_string.c",
        "strlcpy.c",
    ],
    hdrs = [
        "cras_string.h",
        "strlcpy.h",
    ],
    visibility = [
        "//cras/src/common:__pkg__",
        "//cras/src/libcras:__pkg__",
        "//cras/src/server:__pkg__",
    ],
)

cc_library(
    name = "cras_types",
    srcs = [
        "cras_audio_format.c",
        "cras_iodev_info.h",
        "packet_status_logger.h",
    ],
    hdrs = [
        "cras_audio_format.h",
        "cras_types.h",
    ],
    includes = ["."],
    visibility = [
        "//cras/src/benchmark:__pkg__",
        "//cras/src/dsp:__pkg__",
        "//cras/src/libcras:__pkg__",
        "//cras/src/server:__pkg__",
    ],
)

cc_library(
    name = "cras_util",
    srcs = ["cras_util.c"],
    hdrs = ["cras_util.h"],
    visibility = [
        "//cras/src/benchmark:__pkg__",
        "//cras/src/libcras:__pkg__",
        "//cras/src/server:__pkg__",
    ],
    deps = ["//cras/src/common:cras_types"],
)

cc_library(
    name = "utlist",
    hdrs = ["utlist.h"],
    visibility = [
        "//cras/src/libcras:__pkg__",
        "//cras/src/server:__pkg__",
    ],
)

genrule(
    name = "cras_dbus_bindings_h",
    srcs = [
        "//cras/dbus_bindings:xml",
    ],
    outs = [
        "cras_dbus_bindings.h",
    ],
    cmd = "$(location //cras/tools:generate_dbus_bindings_h) " +
          "$(locations //cras/dbus_bindings:xml) > $@",
    tools = ["//cras/tools:generate_dbus_bindings_h"],
    visibility = [
        "//cras/src/tests:__pkg__",
    ],
)

genrule(
    name = "cras_version_h",
    outs = ["cras_version.h"],
    cmd = "echo '#define VCSID \"$(VCSID)\"' > '$@'",
)

cc_library(
    name = "cras_version",
    hdrs = ["cras_version.h"],
    includes = ["."],
    visibility = ["//cras/src/libcras:__pkg__"],
)

cc_library(
    name = "common",
    srcs = [
        "array.h",
        "byte_buffer.h",
        "cras_checksum.c",
        "cras_hats.c",
        "cras_messages.h",
        "cras_metrics.c",
        "cras_observer_ops.h",
        "cras_sbc_codec.c",
        "cras_sbc_codec.h",
        "dumper.c",
        "edid_utils.c",
        "edid_utils.h",
        "packet_status_logger.c",
        "sample_buffer.h",
        "sfh.c",
    ],
    hdrs = [
        "a2dp-codecs.h",
        "bluetooth.h",
        "cras_audio_codec.h",
        "cras_checksum.h",
        "cras_dbus_bindings.h",
        "cras_hats.h",
        "cras_metrics.h",
        "dumper.h",
        "rtp.h",
        "sfh.h",
    ],
    includes = ["."],
    visibility = [
        "//cras:__subpackages__",
    ],
    deps = [
        ":cras_config",
        ":cras_file_wait",
        ":cras_selinux_helper",
        ":cras_shm",
        ":cras_string",
        ":cras_types",
        ":cras_util",
        ":utlist",
        "//cras/src/server:cras_observer_types",
        "@pkg_config//:sbc",
    ] + select({
        "//:metrics_build": ["@libmetrics"],
        "//conditions:default": [],
    }),
)

filegroup(
    name = "public_headers",
    srcs = [
        "cras_audio_format.h",
        "cras_config.h",
        "cras_iodev_info.h",
        "cras_messages.h",
        "cras_shm.h",
        "cras_types.h",
        "cras_util.h",
        "packet_status_logger.h",
    ],
    visibility = ["//dist:__pkg__"],
)

# Allow tests to not specify all headers.
cc_library(
    name = "all_headers",
    testonly = True,
    hdrs = glob(include = ["*.h"]),
    includes = ["."],
    textual_hdrs = glob(include = ["*.c"]),  # Allow including sources
    visibility = [
        "//cras/src/tests:__pkg__",
    ],
)

# Allow tests to use sources directly
exports_files(
    glob(include = [
        "*.c",
    ]),
    visibility = [
        "//cras/src/tests:__pkg__",
    ],
)

# For distribution
exports_files(
    glob(
        include = ["*.h"],
        exclude = [
            "cras_dbus_bindings.h",
            "cras_version.h",
        ],
    ),
    visibility = ["//dist:__pkg__"],
)
