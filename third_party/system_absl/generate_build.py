# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from pathlib import Path
import shutil
import subprocess
import contextlib

here = Path(__file__).absolute().parent


def irender_build(package, labels):
    """Render the BUILD.bazel as a iterator of strings"""

    yield '# DO NOT EDIT!\n'
    yield f'# This file is generated by {Path(__file__).name}.\n'
    yield 'package(default_visibility=["//visibility:public"])\n\n'
    for label in labels:
        # On ChromiumOS, there is a catch-all "absl" pkg-config library.
        # Just alias that instead of having granular library dependencies.
        yield f'alias(name={label!r},\nactual="@pkg_config//absl"\n)\n\n'


def main():
    with contextlib.suppress(FileNotFoundError):
        shutil.rmtree(here / 'absl')

    # Query all visible cc_libraries from absl.
    absl_cc_libraries = subprocess.check_output(
        ['bazel', 'query', 'visible(//:x86_64_build, kind(cc_library, @com_google_absl//...))'],
        text=True,
    ).splitlines()

    packages: dict[str, list[str]] = {}

    for cc_library in absl_cc_libraries:
        prefix = '@com_google_absl//absl/'
        assert cc_library.startswith(prefix), cc_library
        package, _, label = cc_library[len(prefix) :].partition(':')
        packages.setdefault(package, []).append(label)

    for package, labels in packages.items():
        d = here / 'absl' / package
        d.mkdir(parents=True)

        build = subprocess.check_output(['buildifier'], input=''.join(irender_build(package, labels)), text=True)

        (d / 'BUILD.bazel').write_text(build)


main()
